import org.groovymc.modsdotgroovy.core.Platform
import org.groovymc.modsdotgroovy.gradle.tasks.AbstractGatherPlatformDetailsTask

plugins {
	id 'convention.consumer'
	alias libs.plugins.architectury.loom
	alias libs.plugins.mdg
    alias libs.plugins.opensesame
}

modsDotGroovy {
	platform = Platform.NEOFORGE
	inferGather.set false
	multiplatform {
		from ':common'
	}
	apply()
}

tasks.named('gatherNeoForgePlatformDetails', AbstractGatherPlatformDetailsTask).configure {
	minecraftVersion = libs.versions.minecraft.get()
	platformVersion = libs.versions.neoforge.get()
}

repositories {
	maven {
		name = 'NeoForged'
		url = 'https://maven.neoforged.net/'
	}
}

dependencies {
	minecraft libs.minecraft
	neoForge libs.neoforge
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
	}

    implementation libs.codecextras
    include libs.codecextras

    implementation libs.opensesame.core
    include libs.opensesame.core
}

loom {
	runs {
		client {
			client()
			setConfigName("NeoForge Client")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			setConfigName("NeoForge Server")
			ideConfigGenerated(true)
			runDir("runserver")
		}
	}
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "mixin.*.json").each { File file ->
			def obj = new JsonSlurper().parse(file)
			if (obj.refmap) {
				obj.remove('refmap')
			}
			file.text = JsonOutput.toJson(obj)
		}
	}
}
